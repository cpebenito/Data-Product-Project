count
print [count]
[count]
sum(count)
count <- amzn['2012', amzn$row.names]
count
count <- amzn['2012', amzn$row.names, values=TRUE]
count
sum(count)
nrows(count)
nrow(count)
library(lubridate)
count
count1 <- data.frame(count)
View(count1)
colname(count1) <- c("date")
colName(count1) <- c("date")
colNames(count1) <- c('date')
colnames(count1) <- c('date')
View(count1)
install.packages("dplyr")
?mutate
mutate(count1, date <- wday(row.names, label=TRUE) )
mutate(count1, date <- ymd(row.names))
ymd(count1)
View(count1)
class(count1)
str(count1)
str(count)
class(count)
ymd(count)
str(count)
str(count1)
summary(count1)
count1 <- data.frame(count)
summary(count1)
class(count1)
count1
?ymd
ymd(count1$row.names)
View(count1)
ymd(count1[,row.names])
ymd(count1[,date])
ymd(count1[,count1$date])
ymd(count1[,])
?posXlt
?posiXlt
?POSIXlt
count2 <- as.POSIXlt(count1)
count2 <- ymd(count1)
colnames(count1$row.names = dates)
colnames(count1$row.names = 'dates')
colnames(count1) <- c(row.names = 'dates')
View(count1)
count2 <- as.Date(count1)
?xts
xts(count1, order.by =index(count1, tzone = Sys.getenv("TZ")))
Reclass(count1)
reclass(count1)
reclass(count1, Date)
reclass(count1, row.names = Date)
class(count1)
summary(count1)
June <- grep("June",country$Special.Notes)
June <- data.frame(grep("June",country$Special.Notes))
View(June)
View(country)
View(country)
June <- select(country, CountryCode, Special.Notes)
View(June)
June %>% select(country, CountryCode, Special.Notes) %>%
filter(grep("June", Special.Notes))
June <-   filter(June, grep("June", Special.Notes))
View(June)
June1 <- filter(June, grep("June", June$Special.Notes))
June1 <- grep("June", June$Special.Notes)
June1 <- grep("June", June30$Special.Notes)
June1 <- grep("June", June_30$Special.Notes)
June1 <- grep("June_30", June$Special.Notes)
June1 <- grep("June 30", June$Special.Notes)
JUne1
June1
install.packages("dplyr")
library(dplyr)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
count <- amzn['2012']
count <- amzn['2012', amzn$row.names]
nrow(count)
matrix_xts <- as.xts(count, dateFormat='Date')
str(matrix_xts)
df_xts <- as.xts(as.data.frame(count))
df_xts <- as.xts(as.data.frame(count), +important ='very important')
df_xts <- as.xts(as.data.frame(count), + important='very important')
?as.xts
df_xts <- as.xts(as.data.frame(count), important='very important')
df_xts <- as.xts(as.data.frame(count))
df_xts <- as.data.frame(matrix_xts)
View(df_xts)
str(df_xts)
View(df_xts)
matrix_xts <- as.data.frame(count, dateFormat='Date')
View(matrix_xts)
str(matrix_xts)
indexClass(matrix_xts)
indexClass(count)
indexClass(convertIndex(count, 'POSIXct'))
count
str(count)
count <- indexClass(convertIndex(count, 'POSIXct'))
count <- amzn['2012', amzn$row.names]
View(count)
indexClass(convertIndex(count, 'POSIXct'))
?index
str(count)
class(count)
indexClass(count)
matrix_xts <- as.data.frame(count, dateFormat='POSIXct')
View(matrix_xts)
str(matrix_xts)
mutate(matrix_xts, dates = ymd(row.names))
?ymd
library(lubridate)
?ymd
mutate(matrix_xts, dates = ymd(row.names))
mutate(matrix_xts, dates = ymd(matrix_xts$row.names))
View(matrix_xts)
?xts
xts(count, order.by = index(count, dateFormat='POSIXct'), tzone=Sys.getenv("TZ"))
xts(count, tzone=Sys.getenv("TZ"))
xts(count, order.by = index(count, dateFormat='POSIXct'))
View(df_xts)
weekdays(df_xts)
weekdays(count)
?weekdays
?weekdays(count$row.names)
weekdays(count$row.names)
weekdays(count, row.names)
weekdays(matrix_xts, matrix_xts$row.names)
weekdays(matrix_xts)
weekdays(df_xts)
weekdays(amzn, amzn$row.names)
?sampleTimes
sampleTimes
count1 <- sampleTimes['2012']
count1
str(sampleTimes)
count2 <- filter(count1, contains('2012'))
count2 <- filter(count1, contains(2012))
count2 <- filter(sampleTimes, contains('2012'))
count2 <- as.Date(sampleTimes)
str(count2)
?as.Date
count2 <- format(sampleTimes, "%Y %m %d")
count3 <- sampleTimes('2012')
count3 <- count2['2012']
count3
count2
?grep
count3 <- grep("2012", count2)
count3
count3 <- grep("2012", count2, value=TRUE)
count3
count4 <- as.data.frame(count3)
View(count4)
str(count4)
mutate(count4, days = weekdays(count3))
weekdays(count4)
weekdays(count4$count3)
count5 <- format(count4, "%a %b %d")
count5 <- format(count4, "%Y %b %a")
class(count4)
class(count3)
format(count3, "%Y %m %a")
format(count3, "%Y %m %d")
count4 <- as.Date(count3)
count4 <- as.POSIXct(count3)
count4 <- ymd(count3)
count4
count5 <- wday(count4, label=TRUE)
count5
count5['Mon']
grep("Mon", count5)
table(grepl("Mon", count5))
sd(c(5,8,12))
which.min(c(4,1,6))
install.packages("mice", repos="http://cran.rstudio.com/bin/windows/contrib/3.1/mice_2.22.zip")
install.packages("mice", repos="http://cran.rstudio.com/")
library(mice)
choose(5,4) * .5^5 + choose(5,5) *.5^5
pnorm(70, men = 80, sd = 10, lower.tail = FALSE)
pnorm(70, mean = 80, sd = 10, lower.tail = FALSE)
pnorm(70, mean = 80, sd = 10, lower.tail = TRUE)
qnorm(0.95, mean = 1100, sd = 75)
ppois(10, lambda = 5 * 3)
pnorm(14, mean = 15, sd = 10, lower.tail = TRUE)
pnorm(16, mean = 15, sd = 10, lower.tail = FALSE)
pnorm(14, mean = 15, sd = 10)*100
pnorm(16, mean = 15, sd = 10)*100
qnorm(0.95, mean = 1100, sd = 75 / sqrt(100))
pnorm(0.51, mean = 0.5, sd = sd = sqrt(1 / 12 / 100), lower.tail = FALSE)
pnorm(0.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE)
pnorm(0.10, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE)
pnorm(0.75, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE)
pnorm(0.25, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE)
pnorm(-0.25, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE)
pnorm(0.5, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE)
shiny::runApp('R/Data Products/PeerProject')
shiny::runApp('R/Data Products/PeerProject')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
cars <- mutate(mtcars, model = rownames(mtcars))
cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
shiny::runApp('R/Data Products/RPresentation')
cars4 <- filter(cars, cylinders=="4")
best4 <- cars4[which.max(cars4$mpg),12]; mpg4<-cars4[which.max(cars4$mpg),1]
bmpg4 <- data.frame(best4, mpg4)
cars6 <- filter(cars, cylinders=="6"); mpg6<-cars6[which.max(cars6$mpg),1]
best6 <- cars6[which.max(cars6$mpg),12]
bmpg6 <- data.frame(best6, mpg6)
cars8 <- filter(cars, cylinders=="8")
best8 <- cars8[which.max(cars8$mpg),12]; mpg8<-cars8[which.max(cars8$mpg),1]
bmpg8 <- data.frame(best8, mpg8)
bestmpg <- function(cyl) {
if(cyl=='4'){
bmpg4
}
else {
if(cyl=='6'){
bmpg6
}
else {
bmpg8
}
}
}
shinyServer(function(input, output) {
output$inputValue <- renderPrint({input$cyl})
output$prediction <- renderPrint({bestmpg(input$cyl)})
output$carPlot <- renderPlot({
barplot(cars[,input$specs],
main=input$specs,
ylab="Specs",
cex.axis = par("cex.axis"),
cex.names= 0.7, las=2,
names.arg=cars$model)
})
}
)
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
shiny::runApp('R/Data Products/RPresentation')
createmean <- function(x) {
answer <- mean(x)
return(answer)
}
5
createmean(5)
createmean(5, 10)
createmean(rnorm(1:10))
createmean(pnorm(1:10))
createmean(1:10)
shiny::runApp('R/Data Products/RPresentation')
?predict
?lm
?colSums
?dgamma
?lm
choose(4,2)
choose(4,1)
choose(4,4)
choose(4,0)
choose(4,3)
dbinom(5, size=20, p=0.262)
dbinom(2, n=10, p=0.56)
dbinom(2, size=10, p=0.56)
?show
?predict
?lm
?ggamma
?dgamma
?colSums
devtools::install_github("rstudio/rmarkdown")
rmarkdown::render('in.md',
output_format=pdf_document(latex_engine='xelatex')
)
tufte-handout.tex
setwd("~/R/Data Products/Presentation/Data_Product_Slidify")
data(mtcars)
str(mtcars)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(shiny)
library(dplyr)
library(datasets)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(slidifyLibraries)
cars <- mutate(mtcars, model = rownames(mtcars))
cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
cars4 <- filter(cars, cylinders=="4")
best4 <- cars4[which.max(cars4$mpg),12]; mpg4<-cars4[which.max(cars4$mpg),1]
bmpg4 <- data.frame(best4, mpg4)
cars6 <- filter(cars, cylinders=="6"); mpg6<-cars6[which.max(cars6$mpg),1]
best6 <- cars6[which.max(cars6$mpg),12]
bmpg6 <- data.frame(best6, mpg6)
cars8 <- filter(cars, cylinders=="8")
best8 <- cars8[which.max(cars8$mpg),12]; mpg8<-cars8[which.max(cars8$mpg),1]
bmpg8 <- data.frame(best8, mpg8)
View(cars)
slidify('index.Rmd')
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
rm(list=ls())
data(mtcars)
cars <- mutate(mtcars, model = rownames(mtcars))
View(cars)
cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
View(cars)
View(cars)
View(mtcars)
install_version("stringr", version="0.6.2")
library(stringr)
runDeck()
install.packages('stringr')
devtools::install_github('muschellij2/slidify')
install.packages("stringr")
runDeck()
runDeck()
?cat
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
?sidebarPanel
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
shinyapps::deployApp()
shinyapps::deployApp()
setwd("~/R/Data Products/Presentation")
shinyapps::deployApp()
setwd("~/R/Data Products/ShinyProject")
shiny::runApp()
library(shiny)
library(datasets)
library(dplyr)
data(mtcars)
cars <- mutate(mtcars, model = rownames(mtcars))
cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
cars4 <- filter(cars, cylinders=="4")
best4 <- cars4[which.max(cars4$mpg),12]; mpg4<-cars4[which.max(cars4$mpg),1]
bmpg4 <- data.frame(best4, mpg4)
cars6 <- filter(cars, cylinders=="6"); mpg6<-cars6[which.max(cars6$mpg),1]
best6 <- cars6[which.max(cars6$mpg),12]
bmpg6 <- data.frame(best6, mpg6)
cars8 <- filter(cars, cylinders=="8")
best8 <- cars8[which.max(cars8$mpg),12]; mpg8<-cars8[which.max(cars8$mpg),1]
bmpg8 <- data.frame(best8, mpg8)
bestmpg <- function(cyl) {
if(cyl=='4'){
bmpg4
}
else {
if(cyl=='6'){
bmpg6
}
else {
bmpg8
}
}
}
shinyServer(function(input, output) {
output$inputValue <- renderPrint({input$cyl})
output$prediction <- renderPrint({bestmpg(input$cyl)})
output$carPlot <- renderPlot({
barplot(cars[,input$specs],
main=input$specs,
ylab="Specs",
cex.axis = par("cex.axis"),
cex.names= 0.7, las=2,
names.arg=cars$model)
})
}
)
cars <- mutate(mtcars, model = rownames(mtcars))
cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("devtools")
shinyapps::setAccountInfo(name='cpebenito',
token='6EF48DF9327D24E26E1DE53111DA554F',
secret='t8XS3Zb/XSfdThYNJJWeBjmc4KyWBTmUAu+6DHO3')
library(shiny)
runApp()
shiny::runApp()
library(shiny)
runApp()
library(shinyapps)
deployApp()
shiny::runApp()
View(cars)
cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
cars <- mutate(mtcars, model = rownames(mtcars))
?rename
cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
cars <- rename(cars, cyl = cylinders, disp = displacement, hp = horsepower, wt = weight)
View(cars)
cars <- mutate(mtcars, model = rownames(mtcars))
cars1 <- rename(cars, cyl = cylinders, disp = displacement, hp = horsepower, wt = weight)
cars <- rename(cars, cyl = "cylinders", disp = "displacement", hp = "horsepower", wt = "weight")
library(shiny)
library(datasets)
library(dplyr)
cars <- rename(cars, cyl = "cylinders", disp = "displacement", hp = "horsepower", wt = "weight")
cars <- rename(cars, cyl == "cylinders", disp == "displacement", hp == "horsepower", wt == "weight")
cars <- mutate(mtcars, model = rownames(mtcars))
cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
library("dplyr", lib.loc="~/R/win-library/3.2")
cars <- mutate(mtcars, model = rownames(mtcars))
cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
cars <- mutate(mtcars, model = rownames(mtcars))
#cars <- rename(cars, cylinders = cyl, displacement = disp, horsepower = hp, weight = wt)
cars4 <- filter(cars, cyl=="4")
best4 <- cars4[which.max(cars4$mpg),12]; mpg4<-cars4[which.max(cars4$mpg),1]
bmpg4 <- data.frame(best4, mpg4)
cars6 <- filter(cars, cyl=="6"); mpg6<-cars6[which.max(cars6$mpg),1]
best6 <- cars6[which.max(cars6$mpg),12]
bmpg6 <- data.frame(best6, mpg6)
cars8 <- filter(cars, cyl=="8")
best8 <- cars8[which.max(cars8$mpg),12]; mpg8<-cars8[which.max(cars8$mpg),1]
bmpg8 <- data.frame(best8, mpg8)
bestmpg <- function(cyl) {
if(cyl=='4'){
bmpg4
}
else {
if(cyl=='6'){
bmpg6
}
else {
bmpg8
}
}
}
shinyServer(function(input, output) {
output$inputValue <- renderPrint({input$cyl})
output$prediction <- renderPrint({bestmpg(input$cyl)})
output$carPlot <- renderPlot({
barplot(cars[,input$specs],
main=input$specs,
ylab="Specs",
cex.axis = par("cex.axis"),
cex.names= 0.7, las=2,
names.arg=cars$model)
})
}
)
shiny::runApp()
library(shiny)
runApp()
library(shinyapps)
deployApp()
setwd("~/R/Data Products/Presentation/Data_Product_Slidify")
slidify(index.Rmd)
slidify('index.Rmd')
runDeck()
R_HOME/etc/Rprofile.site
options(rpubs.upload.method = "internal")
library("knitr", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
library("rCharts", lib.loc="~/R/win-library/3.2")
library("rmarkdown", lib.loc="~/R/win-library/3.2")
library("shiny", lib.loc="~/R/win-library/3.2")
library("shinyapps", lib.loc="~/R/win-library/3.2")
library("slidify", lib.loc="~/R/win-library/3.2")
library("slidifyLibraries", lib.loc="~/R/win-library/3.2")
